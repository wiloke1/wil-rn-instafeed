{"ast":null,"code":"import _checkForMethod from \"./internal/_checkForMethod.js\";\nimport _curry1 from \"./internal/_curry1.js\";\nimport slice from \"./slice.js\";\n\nvar tail = _curry1(_checkForMethod('tail', slice(1, Infinity)));\n\nexport default tail;","map":{"version":3,"sources":["/Volumes/Data/REACT_LIB/wil-react-native-mentions/example/node_modules/react-native-input-mentions/node_modules/ramda/es/tail.js"],"names":["_checkForMethod","_curry1","slice","tail","Infinity"],"mappings":"AAAA,OAAOA,eAAP;AACA,OAAOC,OAAP;AACA,OAAOC,KAAP;;AA6BA,IAAIC,IAAI,GAERF,OAAO,CAEPD,eAAe,CAAC,MAAD,EAEfE,KAAK,CAAC,CAAD,EAAIE,QAAJ,CAFU,CAFR,CAFP;;AAQA,eAAeD,IAAf","sourcesContent":["import _checkForMethod from \"./internal/_checkForMethod.js\";\nimport _curry1 from \"./internal/_curry1.js\";\nimport slice from \"./slice.js\";\n/**\n * Returns all but the first element of the given list or string (or object\n * with a `tail` method).\n *\n * Dispatches to the `slice` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.head, R.init, R.last\n * @example\n *\n *      R.tail([1, 2, 3]);  //=> [2, 3]\n *      R.tail([1, 2]);     //=> [2]\n *      R.tail([1]);        //=> []\n *      R.tail([]);         //=> []\n *\n *      R.tail('abc');  //=> 'bc'\n *      R.tail('ab');   //=> 'b'\n *      R.tail('a');    //=> ''\n *      R.tail('');     //=> ''\n */\n\nvar tail =\n/*#__PURE__*/\n_curry1(\n/*#__PURE__*/\n_checkForMethod('tail',\n/*#__PURE__*/\nslice(1, Infinity)));\n\nexport default tail;"]},"metadata":{},"sourceType":"module"}