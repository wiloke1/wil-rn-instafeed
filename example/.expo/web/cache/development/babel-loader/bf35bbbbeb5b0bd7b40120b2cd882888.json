{"ast":null,"code":"import _aperture from \"./internal/_aperture.js\";\nimport _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _xaperture from \"./internal/_xaperture.js\";\n\nvar aperture = _curry2(_dispatchable([], _xaperture, _aperture));\n\nexport default aperture;","map":{"version":3,"sources":["/Volumes/Data/REACT_LIB/wil-react-native-mentions/example/node_modules/react-native-input-mentions/node_modules/ramda/es/aperture.js"],"names":["_aperture","_curry2","_dispatchable","_xaperture","aperture"],"mappings":"AAAA,OAAOA,SAAP;AACA,OAAOC,OAAP;AACA,OAAOC,aAAP;AACA,OAAOC,UAAP;;AAuBA,IAAIC,QAAQ,GAEZH,OAAO,CAEPC,aAAa,CAAC,EAAD,EAAKC,UAAL,EAAiBH,SAAjB,CAFN,CAFP;;AAMA,eAAeI,QAAf","sourcesContent":["import _aperture from \"./internal/_aperture.js\";\nimport _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _xaperture from \"./internal/_xaperture.js\";\n/**\n * Returns a new list, composed of n-tuples of consecutive elements. If `n` is\n * greater than the length of the list, an empty list is returned.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig Number -> [a] -> [[a]]\n * @param {Number} n The size of the tuples to create\n * @param {Array} list The list to split into `n`-length tuples\n * @return {Array} The resulting list of `n`-length tuples\n * @see R.transduce\n * @example\n *\n *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]\n *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []\n */\n\nvar aperture =\n/*#__PURE__*/\n_curry2(\n/*#__PURE__*/\n_dispatchable([], _xaperture, _aperture));\n\nexport default aperture;"]},"metadata":{},"sourceType":"module"}